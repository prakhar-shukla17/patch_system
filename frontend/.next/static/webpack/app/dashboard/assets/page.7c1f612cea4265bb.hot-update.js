"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/assets/page",{

/***/ "(app-pages-browser)/./src/lib/systemInfo.ts":
/*!*******************************!*\
  !*** ./src/lib/systemInfo.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSystemInfo: function() { return /* binding */ getSystemInfo; },\n/* harmony export */   getSystemInfoFromBackend: function() { return /* binding */ getSystemInfoFromBackend; }\n/* harmony export */ });\nasync function getSystemInfo() {\n    try {\n        // Get system information using browser APIs where available\n        const systemInfo = {\n            hostname: \"Unknown\",\n            macAddress: \"Unknown\",\n            ipAddress: \"Unknown\",\n            osType: \"Unknown\",\n            platform: navigator.platform || \"Unknown\"\n        };\n        // Try to get hostname from various sources\n        if (true) {\n            // Get OS type from user agent\n            const userAgent = navigator.userAgent;\n            if (userAgent.includes(\"Windows\")) {\n                systemInfo.osType = \"Windows\";\n            } else if (userAgent.includes(\"Mac\")) {\n                systemInfo.osType = \"macOS\";\n            } else if (userAgent.includes(\"Linux\")) {\n                systemInfo.osType = \"Linux\";\n            } else if (userAgent.includes(\"Unix\")) {\n                systemInfo.osType = \"Unix\";\n            }\n            // Try to get IP address using a public API\n            try {\n                const response = await fetch(\"https://api.ipify.org?format=json\");\n                const data = await response.json();\n                systemInfo.ipAddress = data.ip;\n            } catch (error) {\n                console.warn(\"Could not fetch IP address:\", error);\n            }\n            // Try to get hostname from various sources\n            if (window.location.hostname && window.location.hostname !== \"localhost\") {\n                systemInfo.hostname = window.location.hostname;\n            } else {\n                // Fallback to a generated hostname\n                systemInfo.hostname = \"Device-\".concat(Math.random().toString(36).substr(2, 9));\n            }\n        }\n        // Note: MAC address cannot be obtained from browser for security reasons\n        // This would need to be implemented on the backend or through a native app\n        systemInfo.macAddress = \"Requires backend detection\";\n        return systemInfo;\n    } catch (error) {\n        console.error(\"Error getting system info:\", error);\n        return {\n            hostname: \"Unknown\",\n            macAddress: \"Unknown\",\n            ipAddress: \"Unknown\",\n            osType: \"Unknown\",\n            platform: \"Unknown\"\n        };\n    }\n}\n// Function to get system info from backend (if available)\nasync function getSystemInfoFromBackend() {\n    try {\n        // Get the auth token from localStorage\n        const token = localStorage.getItem(\"auth_token\");\n        if (!token) {\n            console.warn(\"No auth token found, using client-side detection\");\n            return getSystemInfo();\n        }\n        const response = await fetch(\"/api/system-info\", {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token),\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            return data;\n        } else {\n            console.warn(\"Backend system info failed:\", response.status, response.statusText);\n        }\n    } catch (error) {\n        console.warn(\"Backend system info not available:\", error);\n    }\n    // Fallback to client-side detection\n    return getSystemInfo();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc3lzdGVtSW5mby50cyIsIm1hcHBpbmdzIjoiOzs7OztBQVFPLGVBQWVBO0lBQ3BCLElBQUk7UUFDRiw0REFBNEQ7UUFDNUQsTUFBTUMsYUFBeUI7WUFDN0JDLFVBQVU7WUFDVkMsWUFBWTtZQUNaQyxXQUFXO1lBQ1hDLFFBQVE7WUFDUkMsVUFBVUMsVUFBVUQsUUFBUSxJQUFJO1FBQ2xDO1FBRUEsMkNBQTJDO1FBQzNDLElBQUksSUFBa0IsRUFBYTtZQUNqQyw4QkFBOEI7WUFDOUIsTUFBTUUsWUFBWUQsVUFBVUMsU0FBUztZQUNyQyxJQUFJQSxVQUFVQyxRQUFRLENBQUMsWUFBWTtnQkFDakNSLFdBQVdJLE1BQU0sR0FBRztZQUN0QixPQUFPLElBQUlHLFVBQVVDLFFBQVEsQ0FBQyxRQUFRO2dCQUNwQ1IsV0FBV0ksTUFBTSxHQUFHO1lBQ3RCLE9BQU8sSUFBSUcsVUFBVUMsUUFBUSxDQUFDLFVBQVU7Z0JBQ3RDUixXQUFXSSxNQUFNLEdBQUc7WUFDdEIsT0FBTyxJQUFJRyxVQUFVQyxRQUFRLENBQUMsU0FBUztnQkFDckNSLFdBQVdJLE1BQU0sR0FBRztZQUN0QjtZQUVBLDJDQUEyQztZQUMzQyxJQUFJO2dCQUNGLE1BQU1LLFdBQVcsTUFBTUMsTUFBTTtnQkFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO2dCQUNoQ1osV0FBV0csU0FBUyxHQUFHUSxLQUFLRSxFQUFFO1lBQ2hDLEVBQUUsT0FBT0MsT0FBTztnQkFDZEMsUUFBUUMsSUFBSSxDQUFDLCtCQUErQkY7WUFDOUM7WUFFQSwyQ0FBMkM7WUFDM0MsSUFBSUcsT0FBT0MsUUFBUSxDQUFDakIsUUFBUSxJQUFJZ0IsT0FBT0MsUUFBUSxDQUFDakIsUUFBUSxLQUFLLGFBQWE7Z0JBQ3hFRCxXQUFXQyxRQUFRLEdBQUdnQixPQUFPQyxRQUFRLENBQUNqQixRQUFRO1lBQ2hELE9BQU87Z0JBQ0wsbUNBQW1DO2dCQUNuQ0QsV0FBV0MsUUFBUSxHQUFHLFVBQWtELE9BQXhDa0IsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsTUFBTSxDQUFDLEdBQUc7WUFDdkU7UUFDRjtRQUVBLHlFQUF5RTtRQUN6RSwyRUFBMkU7UUFDM0V0QixXQUFXRSxVQUFVLEdBQUc7UUFFeEIsT0FBT0Y7SUFDVCxFQUFFLE9BQU9jLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDhCQUE4QkE7UUFDNUMsT0FBTztZQUNMYixVQUFVO1lBQ1ZDLFlBQVk7WUFDWkMsV0FBVztZQUNYQyxRQUFRO1lBQ1JDLFVBQVU7UUFDWjtJQUNGO0FBQ0Y7QUFFQSwwREFBMEQ7QUFDbkQsZUFBZWtCO0lBQ3BCLElBQUk7UUFDRix1Q0FBdUM7UUFDdkMsTUFBTUMsUUFBUUMsYUFBYUMsT0FBTyxDQUFDO1FBRW5DLElBQUksQ0FBQ0YsT0FBTztZQUNWVCxRQUFRQyxJQUFJLENBQUM7WUFDYixPQUFPakI7UUFDVDtRQUVBLE1BQU1VLFdBQVcsTUFBTUMsTUFBTSxvQkFBb0I7WUFDL0NpQixTQUFTO2dCQUNQLGlCQUFpQixVQUFnQixPQUFOSDtnQkFDM0IsZ0JBQWdCO1lBQ2xCO1FBQ0Y7UUFFQSxJQUFJZixTQUFTbUIsRUFBRSxFQUFFO1lBQ2YsTUFBTWpCLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtZQUNoQyxPQUFPRDtRQUNULE9BQU87WUFDTEksUUFBUUMsSUFBSSxDQUFDLCtCQUErQlAsU0FBU29CLE1BQU0sRUFBRXBCLFNBQVNxQixVQUFVO1FBQ2xGO0lBQ0YsRUFBRSxPQUFPaEIsT0FBTztRQUNkQyxRQUFRQyxJQUFJLENBQUMsc0NBQXNDRjtJQUNyRDtJQUVBLG9DQUFvQztJQUNwQyxPQUFPZjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvc3lzdGVtSW5mby50cz9kZjgwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3lzdGVtSW5mbyB7XHJcbiAgaG9zdG5hbWU6IHN0cmluZ1xyXG4gIG1hY0FkZHJlc3M6IHN0cmluZ1xyXG4gIGlwQWRkcmVzczogc3RyaW5nXHJcbiAgb3NUeXBlOiBzdHJpbmdcclxuICBwbGF0Zm9ybTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTeXN0ZW1JbmZvKCk6IFByb21pc2U8U3lzdGVtSW5mbz4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBHZXQgc3lzdGVtIGluZm9ybWF0aW9uIHVzaW5nIGJyb3dzZXIgQVBJcyB3aGVyZSBhdmFpbGFibGVcclxuICAgIGNvbnN0IHN5c3RlbUluZm86IFN5c3RlbUluZm8gPSB7XHJcbiAgICAgIGhvc3RuYW1lOiAnVW5rbm93bicsXHJcbiAgICAgIG1hY0FkZHJlc3M6ICdVbmtub3duJyxcclxuICAgICAgaXBBZGRyZXNzOiAnVW5rbm93bicsXHJcbiAgICAgIG9zVHlwZTogJ1Vua25vd24nLFxyXG4gICAgICBwbGF0Zm9ybTogbmF2aWdhdG9yLnBsYXRmb3JtIHx8ICdVbmtub3duJ1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRyeSB0byBnZXQgaG9zdG5hbWUgZnJvbSB2YXJpb3VzIHNvdXJjZXNcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAvLyBHZXQgT1MgdHlwZSBmcm9tIHVzZXIgYWdlbnRcclxuICAgICAgY29uc3QgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxyXG4gICAgICBpZiAodXNlckFnZW50LmluY2x1ZGVzKCdXaW5kb3dzJykpIHtcclxuICAgICAgICBzeXN0ZW1JbmZvLm9zVHlwZSA9ICdXaW5kb3dzJ1xyXG4gICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmNsdWRlcygnTWFjJykpIHtcclxuICAgICAgICBzeXN0ZW1JbmZvLm9zVHlwZSA9ICdtYWNPUydcclxuICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5jbHVkZXMoJ0xpbnV4JykpIHtcclxuICAgICAgICBzeXN0ZW1JbmZvLm9zVHlwZSA9ICdMaW51eCdcclxuICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5jbHVkZXMoJ1VuaXgnKSkge1xyXG4gICAgICAgIHN5c3RlbUluZm8ub3NUeXBlID0gJ1VuaXgnXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRyeSB0byBnZXQgSVAgYWRkcmVzcyB1c2luZyBhIHB1YmxpYyBBUElcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5pcGlmeS5vcmc/Zm9ybWF0PWpzb24nKVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgICBzeXN0ZW1JbmZvLmlwQWRkcmVzcyA9IGRhdGEuaXBcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBmZXRjaCBJUCBhZGRyZXNzOicsIGVycm9yKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUcnkgdG8gZ2V0IGhvc3RuYW1lIGZyb20gdmFyaW91cyBzb3VyY2VzXHJcbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgJiYgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICE9PSAnbG9jYWxob3N0Jykge1xyXG4gICAgICAgIHN5c3RlbUluZm8uaG9zdG5hbWUgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWVcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGYWxsYmFjayB0byBhIGdlbmVyYXRlZCBob3N0bmFtZVxyXG4gICAgICAgIHN5c3RlbUluZm8uaG9zdG5hbWUgPSBgRGV2aWNlLSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWBcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vdGU6IE1BQyBhZGRyZXNzIGNhbm5vdCBiZSBvYnRhaW5lZCBmcm9tIGJyb3dzZXIgZm9yIHNlY3VyaXR5IHJlYXNvbnNcclxuICAgIC8vIFRoaXMgd291bGQgbmVlZCB0byBiZSBpbXBsZW1lbnRlZCBvbiB0aGUgYmFja2VuZCBvciB0aHJvdWdoIGEgbmF0aXZlIGFwcFxyXG4gICAgc3lzdGVtSW5mby5tYWNBZGRyZXNzID0gJ1JlcXVpcmVzIGJhY2tlbmQgZGV0ZWN0aW9uJ1xyXG5cclxuICAgIHJldHVybiBzeXN0ZW1JbmZvXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgc3lzdGVtIGluZm86JywgZXJyb3IpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBob3N0bmFtZTogJ1Vua25vd24nLFxyXG4gICAgICBtYWNBZGRyZXNzOiAnVW5rbm93bicsXHJcbiAgICAgIGlwQWRkcmVzczogJ1Vua25vd24nLFxyXG4gICAgICBvc1R5cGU6ICdVbmtub3duJyxcclxuICAgICAgcGxhdGZvcm06ICdVbmtub3duJ1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gRnVuY3Rpb24gdG8gZ2V0IHN5c3RlbSBpbmZvIGZyb20gYmFja2VuZCAoaWYgYXZhaWxhYmxlKVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3lzdGVtSW5mb0Zyb21CYWNrZW5kKCk6IFByb21pc2U8U3lzdGVtSW5mbz4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBHZXQgdGhlIGF1dGggdG9rZW4gZnJvbSBsb2NhbFN0b3JhZ2VcclxuICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2F1dGhfdG9rZW4nKVxyXG4gICAgXHJcbiAgICBpZiAoIXRva2VuKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignTm8gYXV0aCB0b2tlbiBmb3VuZCwgdXNpbmcgY2xpZW50LXNpZGUgZGV0ZWN0aW9uJylcclxuICAgICAgcmV0dXJuIGdldFN5c3RlbUluZm8oKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3N5c3RlbS1pbmZvJywge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YCxcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICBcclxuICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgICAgIHJldHVybiBkYXRhXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0JhY2tlbmQgc3lzdGVtIGluZm8gZmFpbGVkOicsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uuc3RhdHVzVGV4dClcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS53YXJuKCdCYWNrZW5kIHN5c3RlbSBpbmZvIG5vdCBhdmFpbGFibGU6JywgZXJyb3IpXHJcbiAgfVxyXG4gIFxyXG4gIC8vIEZhbGxiYWNrIHRvIGNsaWVudC1zaWRlIGRldGVjdGlvblxyXG4gIHJldHVybiBnZXRTeXN0ZW1JbmZvKClcclxufVxyXG4iXSwibmFtZXMiOlsiZ2V0U3lzdGVtSW5mbyIsInN5c3RlbUluZm8iLCJob3N0bmFtZSIsIm1hY0FkZHJlc3MiLCJpcEFkZHJlc3MiLCJvc1R5cGUiLCJwbGF0Zm9ybSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluY2x1ZGVzIiwicmVzcG9uc2UiLCJmZXRjaCIsImRhdGEiLCJqc29uIiwiaXAiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwid2luZG93IiwibG9jYXRpb24iLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJnZXRTeXN0ZW1JbmZvRnJvbUJhY2tlbmQiLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJoZWFkZXJzIiwib2siLCJzdGF0dXMiLCJzdGF0dXNUZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/systemInfo.ts\n"));

/***/ })

});